definitions:
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
    type: object
  auth.SignupRequest:
    properties:
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
    required:
    - email
    - fullName
    - password
    type: object
  auth.SignupResponse:
    properties:
      token:
        type: string
    type: object
  domain.Error:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  healthcheck.HealthcheckResponse:
    properties:
      status:
        example: OK
        type: string
    type: object
  todo.CreateTodoRequest:
    properties:
      title:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - title
    type: object
  todo.GetTodoByIdResponse:
    properties:
      completed:
        type: boolean
      completed_at:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  todo.UpdateTodoRequest:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  user.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  user.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.GetCurrentUserResponse:
    properties:
      createdAt:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: string
      isEmailVerified:
        type: boolean
      role:
        type: string
    type: object
  user.GetUserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      is_email_verified:
        type: boolean
    type: object
  user.ResetPasswordRequest:
    properties:
      password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  user.UpdateFullNameRequest:
    properties:
      address:
        type: string
      full_name:
        type: string
    required:
    - address
    - full_name
    type: object
  user.User:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
    type: object
  user.VerifiyEmailRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
info:
  contact: {}
  description: |2-

    ## How to use the API
    1- Click which endpoint you want to use.
    2- Click "Try it out" button.
    3- Add your request body or your parameters which are showed and required by the endpoint.
    4- Click "Execute" button.
    5- You will see the response.

    Some endpoints require authentication. In this case, you need to log in first.
    I created two types of users for this project: admin and regular user.
    Just send a POST request as below at [here](http://localhost:3000/swagger/index.html).
    After login, you will get a JWT token in cookies.
    If you're using cookie-based auth, the cookie will be sent automatically.
    Alternatively, you can use Bearer Token authentication via the "Authorize" button.

    ### Login Request For Admin
    ```json
    {
    "email": "admin@admin.com",
    "password": "admin123"
    }
    ```

    ### Login Request For User
    ```json
    {
    "email": "user@user.com",
    "password": "user1234"
    }
    ```

    ## Error Handling
    All error responses will follow this JSON format:

    ```json
    {
    "message": string,
    "code": int
    }
    ```
    ### Example
    ```json
    {
    "message": "invalid request",
    "code": 400
    }
    ```
    Please handle errors accordingly on the client side.
    The API returns an error which is according to a language at some endpoints.
    For example, if you send a request to an anonymous user endpoint, the API will return an error in a specific language.
    In this case, you need to specify the language in the request header as `accept-language`.
    I will specify which endpoints require that header.

    If you send a request to an admin endpoint, the API will return an error in Turkish.

    ## Reminder
    I did not use `/api` prefix for the endpoint routes. Because I love to host my API on "api" subdomain.
    Status code with `2xx` is a success code.
    Status code with `4xx` is a client error code.
    Status code with `5xx` is a server error code.
  title: Advanced Todo API
  version: "1.0"
paths:
  /admin/users:
    get:
      consumes:
      - application/json
      description: Fetch users with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get users for admin
      tags:
      - 3- User
  /admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves user details by ID for admin purposes.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/user.GetUserResponse'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get user details by ID for admin
      tags:
      - 3- User
  /healthcheck:
    get:
      consumes:
      - application/json
      description: Check the health of the service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/healthcheck.HealthcheckResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.Error'
      summary: Healthcheck
      tags:
      - 1- Healthcheck
  /login:
    post:
      consumes:
      - application/json
      description: Login a user or admin
      parameters:
      - description: Response Language
        enum:
        - tr
        - ar
        - en
        in: header
        name: response-language
        required: true
        type: string
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Login
      tags:
      - 2- Auth
  /signup:
    post:
      consumes:
      - application/json
      description: Signup a new user
      parameters:
      - description: Signup request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SignupResponse'
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
      summary: Signup
      tags:
      - 2- Auth
  /todos:
    post:
      consumes:
      - application/json
      description: Creates a new todo item for the authenticated user.
      parameters:
      - description: Todo details
        in: body
        name: CreateTodoRequest
        required: true
        schema:
          $ref: '#/definitions/todo.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Todo created successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Create a new todo
      tags:
      - todos
  /todos/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a todo item for the authenticated user.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Todo deleted successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Delete a todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: Retrieves a todo item by its ID for the authenticated user.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todo.GetTodoByIdResponse'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "404":
          description: Todo not found
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Get a todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Updates an existing todo item for the authenticated user.
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      - description: Todo details
        in: body
        name: UpdateTodoRequest
        required: true
        schema:
          $ref: '#/definitions/todo.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Todo updated successfully
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
        "404":
          description: Todo not found
        "500":
          description: Internal server error
      security:
      - BearerAuth: []
      summary: Update an existing todo
      tags:
      - todos
  /users/account:
    delete:
      description: Delete a user's account
      parameters:
      - description: Response Language
        enum:
        - tr
        - en
        - ar
        in: header
        name: response-language
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      tags:
      - 3- User
    patch:
      consumes:
      - application/json
      description: Update a user's account information
      parameters:
      - description: Response Language
        enum:
        - tr
        - en
        - ar
        in: header
        name: response-language
        required: true
        type: string
      - description: Update User Account Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateFullNameRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update User Account
      tags:
      - 3- User
  /users/forgot-password:
    post:
      consumes:
      - application/json
      description: It sends  a password reset link to the user's email address.
      parameters:
      - description: Response Language
        enum:
        - tr
        - ar
        - en
        in: header
        name: response-language
        required: true
        type: string
      - description: Forgot Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Forgot Password
      tags:
      - 3- User
  /users/password:
    patch:
      consumes:
      - application/json
      description: Change the password of a user
      parameters:
      - description: Response Language
        enum:
        - tr
        - ar
        - en
        in: header
        name: response-language
        required: true
        type: string
      - description: Change User Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Change User Password
      tags:
      - 3- User
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get the current user. Requires Bearer token authentication.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.GetCurrentUserResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Current User
      tags:
      - 3- User
  /users/reset-password:
    post:
      consumes:
      - application/json
      description: It resets a user's password using a token.
      parameters:
      - description: Response Language
        enum:
        - tr
        - en
        - ar
        in: header
        name: response-language
        required: true
        type: string
      - description: Reset Password Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Reset Password
      tags:
      - 3- User
  /users/send-verification-email:
    post:
      consumes:
      - application/json
      description: Sends a verification email to the user
      parameters:
      - description: Response Language
        enum:
        - tr
        - en
        - ar
        in: header
        name: response-language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Send Verification Email
      tags:
      - 3- User
  /users/verify-email:
    post:
      consumes:
      - application/json
      description: Verifies a user's email address using a token
      parameters:
      - description: Response Language
        enum:
        - tr
        - en
        - ar
        in: header
        name: response-language
        required: true
        type: string
      - description: Verify Email Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.VerifiyEmailRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      summary: Verify user email
      tags:
      - 3- User
securityDefinitions:
  BearerAuth:
    description: Enter your Bearer token in the format **Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
  JWTAuth:
    description: JWT cookie obtained from login endpoint
    in: cookie
    name: jwt
    type: apiKey
swagger: "2.0"
